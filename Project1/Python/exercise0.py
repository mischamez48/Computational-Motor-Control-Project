from plotting_common import plot_2d, plot_1d, save_figures, plot_left_right, plot_trajectory, plot_time_histories, plot_time_histories_multiple_windows, plot_joint_angles
from util.run_closed_loop import run_single
from simulation_parameters import SimulationParameters
import matplotlib.pyplot as plt
import os
import farms_pylog as pylog
import numpy as np
import matplotlib
from matplotlib.gridspec import GridSpec
import pandas as pd
matplotlib.rc('font', **{"size": 15})


def run_parameter_test(c, A, f, log_path, save_dir):
    """
    Run simulation with the given parameter combination
    
    Parameters:
    -----------
    c : float
        The coupling strength parameter
    A : float
        The amplitude parameter
    f : float
        The frequency parameter in Hz
    log_path : str
        Path to save logs
    save_dir : str
        Path to save plots
    
    Returns:
    --------
    controller : object
        The controller object containing simulation results
    metrics : dict
        Performance metrics
    """
    # Make directory for this specific parameter combination
    param_dir = f"{save_dir}/c_{c:.1f}_A_{A:.1f}_f_{f:.1f}/"
    os.makedirs(param_dir, exist_ok=True)
    
    # Configure simulation
    pars = SimulationParameters(
        simulation_i=0,
        n_iterations=5001,
        controller="sine",
        amp=A,           # Use the amplitude parameter
        coupling=c,      # Use the coupling parameter
        freq=f,          # Use the frequency parameter
        twl=1,
        compute_metrics="all",
        headless=True,
        video_record=False,
        log_path=log_path,
        return_network=True,
    )
    
    # Run the simulation
    controller = run_single(pars)
    
    # Get performance metrics
    metrics = {}
    if hasattr(controller, 'metrics'):
        metrics = controller.metrics
    
    # Plot results
    times = controller.times
    state = controller.motor_out
    left_idx = controller.motor_l
    right_idx = controller.motor_r
    
    # Figure 1: Left and Right Muscle Activations
    plt.figure(figsize=(10, 6))
    plot_left_right(times, state, left_idx, right_idx, cm="jet", offset=0.3)
    plt.suptitle(f"Muscle Activations (c={c:.1f}, A={A:.1f}, f={f:.1f}Hz)")
    plt.tight_layout()
    plt.savefig(f"{param_dir}/muscle_activations.png", dpi=300, bbox_inches='tight')
    plt.close()
    
    # Figure 2: Head Trajectory
    plt.figure(figsize=(8, 6))
    plot_trajectory(controller)
    plt.title(f"Head Trajectory (c={c:.1f}, A={A:.1f}, f={f:.1f}Hz)")
    plt.tight_layout()
    plt.savefig(f"{param_dir}/head_trajectory.png", dpi=300, bbox_inches='tight')
    plt.close()
    
    # Figure 3: Joint Angles
    # Needed to wrtie own function, because plotting issues with the original one (plot_joint_angles generated by ChatGPT)
    joint_angles = controller.joints_positions
    n_joints = joint_angles.shape[1]
    joint_labels = [f"Joint {i}" for i in range(n_joints)]
    
    fig = plot_joint_angles(
        times, 
        joint_angles, 
        title=f"Joint Angles (c={c:.1f}, A={A:.1f}, f={f:.1f}Hz)",
        joint_labels=joint_labels,
        savepath=f"{param_dir}/joint_angles.png",
        closefig=True
    )
    
    return controller, metrics


def question1():
    """
    Test the controller's ability to generate swimming locomotion for fixed values
    of c ∈ [0,2], A ∈ [0,2] and f ∈ [1,5]Hz (test different parameter combinations).
    Show plots of the left and right muscle activations ML and MR, and of the animal
    head trajectory in the (x,y) plane. Also, show the evolution of the joint angles.
    Report the performance metrics.

    This function for passing trough each combination of parameters was mainly generated and adapted from chatGPT.

    """
    # Create directories
    log_path = './logs/exercise0/'
    save_dir = './plots/exercise0/'
    os.makedirs(log_path, exist_ok=True)
    os.makedirs(save_dir, exist_ok=True)
    
    # Define parameter combinations to test
    # We'll use a grid of values for each parameter
    c_values = [0.0, 0.5, 1.0, 1.5, 2.0]  # Coupling strength
    A_values = [0.5, 1.0, 1.5, 2.0]       # Amplitude
    f_values = [1.0, 2.0, 3.0, 4.0, 5.0]  # Frequency (Hz)
    
    # Initialize metrics collection
    all_metrics = []
    
    # Run simulations for parameter combinations (use a subset to save time)
    # You can modify this to test more combinations
    test_combinations = [
        (0.0, 1.0, 3.0),  # No coupling, medium amplitude, medium frequency
        (1.0, 1.0, 3.0),  # Medium coupling, medium amplitude, medium frequency
        (2.0, 1.0, 3.0),  # High coupling, medium amplitude, medium frequency
        (1.0, 0.5, 3.0),  # Medium coupling, low amplitude, medium frequency
        (1.0, 2.0, 3.0),  # Medium coupling, high amplitude, medium frequency
        (1.0, 1.0, 1.0),  # Medium coupling, medium amplitude, low frequency
        (1.0, 1.0, 5.0),  # Medium coupling, medium amplitude, high frequency
    ]
    
    # Alternatively, run full parameter sweep (uncomment to use)
    # Warning: This will generate many simulations and take a long time
    """
    test_combinations = []
    for c in c_values:
        for A in A_values:
            for f in f_values:
                test_combinations.append((c, A, f))
    """
    
    # Run simulations for the selected parameter combinations
    for c, A, f in test_combinations:
        pylog.info(f"Running simulation with c={c:.1f}, A={A:.1f}, f={f:.1f}Hz")
        controller, metrics = run_parameter_test(c, A, f, log_path, save_dir)
        
        # Collect metrics
        metrics_entry = {
            'c': c,
            'A': A, 
            'f': f
        }
        
        # Add any metrics from the controller
        if metrics:
            for key, value in metrics.items():
                metrics_entry[key] = value
        
        all_metrics.append(metrics_entry)
        
    # Save metrics to CSV
    metrics_df = pd.DataFrame(all_metrics)
    metrics_df.to_csv(f"{save_dir}/performance_metrics.csv", index=False)
    
    # Display metrics summary
    print("\nPerformance Metrics Summary:")
    print(metrics_df)
    
    return metrics_df


if __name__ == '__main__':
    metrics_df = question1()